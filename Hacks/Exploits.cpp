#include "Exploits.h"

#include "../Interfaces.h"
#include "../Memory.h"

#include "../SDK/Engine.h"
#include "../SDK/Entity.h"
#include "../SDK/EntityList.h"
#include "../SDK/GlobalVars.h"
#include "../SDK/NetworkChannel.h"
#include "../SDK/UserCmd.h"

void Doubletap::run(bool &sendPacket, UserCmd *cmd) noexcept
{

	if (!localPlayer)
		return;

	if (!config->exploits.doubletap)
		return;

	if (config->exploits.doubletapKey)
		if (!config->exploits.doubletapKeyMode)
		{
			if (!GetAsyncKeyState(config->exploits.doubletapKey))
				return;
		}
		else
		{
			static bool toggle = true;
			if (GetAsyncKeyState(config->exploits.doubletapKey) & 1)
				toggle = !toggle;
			if (!toggle)
				return;
		}

	tick->calcTicks();

	if (cmd->buttons & UserCmd::IN_ATTACK)
	{
		if (tick->canShift(16))
		{
			tick->scheduledTickShift = 16;
			tick->lastShift = cmd->commandNumber;
		}
	}

	tick->calcTicks();

	if (cmd->commandNumber - tick->lastShift > 0)
	{
		sendPacket = true;
		cmd->tickCount = INT_MAX;
	}
}

void Tick::calcTicks() noexcept
{
	ticksAllowedForProcessing = maxUserCmdProcessTicks - interfaces->engine->getNetworkChannel()->chokedPackets;
	ticksAllowedForProcessing = std::clamp(ticksAllowedForProcessing, 0, maxUserCmdProcessTicks);
}

bool Tick::canShift(int ticks) noexcept
{
	if (ticks <= 0)
		return false;

	if ((tick->ticksAllowedForProcessing - ticks) < 0)
		return false;

	if (localPlayer->isDefusing() || localPlayer->waitForNoAttack())
		return false;

	auto activeWeapon = localPlayer->getActiveWeapon();
	float nextAttack = (localPlayer->nextAttack() + (ticks * memory->globalVars->intervalPerTick));

	if (!activeWeapon || !activeWeapon->clip() || localPlayer->throwing())
		return false;

	if (activeWeapon->isKnife() || activeWeapon->isGrenade() || activeWeapon->isShotgun()
		|| activeWeapon->itemDefinitionIndex2() == WeaponId::Revolver
		|| activeWeapon->itemDefinitionIndex2() == WeaponId::Awp
		|| activeWeapon->itemDefinitionIndex2() == WeaponId::Ssg08
		|| activeWeapon->itemDefinitionIndex2() == WeaponId::Taser
		|| activeWeapon->itemDefinitionIndex2() == WeaponId::Revolver)
		return false;

	if (nextAttack >= memory->globalVars->serverTime())
		return false;

	return true;
}
